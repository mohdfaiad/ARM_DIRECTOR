‘а ў­Ґ­ЁҐ д ©«®ў UGRTimelines.dev Ё UGRTIMELINES.ARM
***** UGRTimelines.dev
uses
    Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
    Dialogs, ComCtrls, Buttons, StdCtrls, ExtCtrls, Grids, ImgList, utimeline,
    ucommon,
    umyevents, OpenGL, system.json, uwebget;

***** UGRTIMELINES.ARM
uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, Buttons, StdCtrls, ExtCtrls, Grids, ImgList, utimeline,
  ucommon,
  umyevents, OpenGL, System.json,uwebget;

*****

ЌҐ г¤ Ґвбп ўлЇ®«­Ёвм бЁ­еа®­Ё§ жЁо бва®Є. ‘«ЁиЄ®¬ ¬­®Ј® а §«ЁзЁ© ¬Ґ¦¤г д ©« ¬Ё.
***** UGRTimelines.dev
Type

    TEditingArea = (edNone, edStart, edCenter, edFinish);

    TTLParameters = Class(TObject)
    public
        BackGround: tcolor; // Фоновый цвет
        ForeGround: tcolor; // Цвет пустых тайм-линий
        MaxFrameSize: integer; // Максимальный размер кадра в пиксилях
        FrameSize: integer; // Текущий размер кадра
        Start: longint; // Позиция курсора начала воспроизведения (кадры)
        Finish: longint; // Позиция курсора конца воспроизведения (кадры)
        // NTK    : longint;           //Начальный тайм код (кадры)
        ZeroPoint: longint; // Нулевая точка отсчета начальный тайм-код (кадры)
        MyCursor: longint;
        // Положение курсора относительно начала экрана (пиксили)
        ScreenStart: longint; // Относительная позиция начала экрана (пиксили)
        ScreenEnd: longint; // Относительная позиция конца экрана (пиксли)
        Preroll: longint; // Начальный буффер (кадры)
        Postroll: longint; // Конечный буффер (кадры)
        Duration: longint; // Общая длителность клипа (кадры)
        EndPoint: longint; // Положение конца клипа Preroll+Duration (кадры)
        lrTransperent0: tcolor; // Цвет прозрачности для слоя 0
        lrTransperent1: tcolor; // Цвет прозрачности для слоя 1
        lrTransperent2: tcolor; // Цвет прозрачности для слоя 2
        Position: longint; // Tекущая позиция клипа (кадры)
        ScreenStartFrame: longint; // Абсолютная позиция начала экрана (кадры)
        ScreenEndFrame: longint; // Абсолютная позиция конца экрана (кадры)
        StopPosition: longint; // Позиция остановки клип (кадры)
        Scaler: real; // Отношение ширины Bitmap к ширине экрана
        vlcmode: TPlayerMode;
        TLTimeCode: string;
        command: string;
        procedure InitParameters;
        procedure UpdateParameters;
        procedure SetScreenBoanders;
        Procedure WriteToStream(F: tStream);
        Procedure ReadFromStream(F: tStream);
        Constructor Create;
        Destructor Destroy; override;
    end;

    TTLScaler = Class(TObject)
    public
        PenColor: tcolor;
        FontColor: tcolor;
        FontSize: integer;
        FontName: tfontname;
        Rect: TRect;
        procedure DrawScaler(cv: tcanvas);
        // Procedure WriteToStream(F : tStream);
        // Procedure ReadFromStream(F : tStream);
        procedure UpdateData;
        Constructor Create;
        Destructor Destroy; override;
    end;

    TTLTimeline = Class(TObject)
    public
        IDTimeline: longint;
        TypeTL: TTypeTimeline;
        Block: boolean;
        Status: integer;
        Rect: TRect;
        Count: integer;
        Events: Array of TMyEvent;

        function AddEvent(Position: longint; psgrd, psclr: integer): integer;
        function FindEventID(IdEvent: longint): integer;
        function FindEvent(Position: longint): integer;
        procedure Delete(Position: longint);
        procedure DeleteID(IdEvent: longint);
        procedure Clear;
        procedure Assign(ListEvents: TTLTimeline);
        // Procedure DrawDeviceTimeline(cv : tcanvas; EPos : integer);
        // Procedure DrawTextTimeline(cv : tcanvas; EPos : integer);
        // Procedure DrawMediaTimeline(cv : tcanvas; Color : tcolor; EPos : integer);
        // procedure DrawTimeline(cv : tcanvas; NomTl : integer; EPos : integer);
        // Procedure WriteToStream(F : tStream);
        // Procedure ReadFromStream(F : tStream);
        // procedure UpdateData;
        Constructor Create;
        Destructor Destroy; override;
    end;

    TTLEditor = Class(TObject)
    public
        Index: integer;
        isZoneEditor: boolean;
        DoubleClick: boolean;
        IDTimeline: longint;
        Block: boolean;
        Status: integer;
        TypeTL: TTypeTimeline;
        Rect: TRect;
        Count: integer;
        Events: Array of TMyEvent;
        function AddEvent(Position: longint; psgrd, psclr: integer): integer;
        function InsertDevice(Position: longint): integer;
        function InsertText(Position: longint): integer;
***** UGRTIMELINES.ARM
Type
  TEditingArea = (edNone, edStart, edCenter, edFinish);

  TTLParameters = Class(TObject)
  public
    BackGround: tcolor; // Фоновый цвет
    ForeGround: tcolor; // Цвет пустых тайм-линий
    MaxFrameSize: integer; // Максимальный размер кадра в пиксилях
    FrameSize: integer; // Текущий размер кадра
    Start: longint; // Позиция курсора начала воспроизведения (кадры)
    Finish: longint; // Позиция курсора конца воспроизведения (кадры)
    // NTK    : longint;           //Начальный тайм код (кадры)
    ZeroPoint: longint; // Нулевая точка отсчета начальный тайм-код (кадры)
    MyCursor: longint; // Положение курсора относительно начала экрана (пиксили)
    ScreenStart: longint; // Относительная позиция начала экрана (пиксили)
    ScreenEnd: longint; // Относительная позиция конца экрана (пиксли)
    Preroll: longint; // Начальный буффер (кадры)
    Postroll: longint; // Конечный буффер (кадры)
    Duration: longint; // Общая длителность клипа (кадры)
    EndPoint: longint; // Положение конца клипа Preroll+Duration (кадры)
    lrTransperent0: tcolor; // Цвет прозрачности для слоя 0
    lrTransperent1: tcolor; // Цвет прозрачности для слоя 1
    lrTransperent2: tcolor; // Цвет прозрачности для слоя 2
    Position: longint; // Tекущая позиция клипа (кадры)
    ScreenStartFrame: longint; // Абсолютная позиция начала экрана (кадры)
    ScreenEndFrame: longint; // Абсолютная позиция конца экрана (кадры)
    StopPosition: longint; // Позиция остановки клип (кадры)
    Scaler: real; // Отношение ширины Bitmap к ширине экрана
    VLCMode: TPlayerMode;
    command : string;
    TLTimeCode : string;
    TimeToStart : string;
    Reload : Boolean;
    ClipName : String;
    procedure InitParameters;
    procedure UpdateParameters;
    procedure SetScreenBoanders;
    Procedure WriteToStream(F: tStream);
    Procedure ReadFromStream(F: tStream);
    Constructor Create;
    Destructor Destroy; override;
  end;

  TTLScaler = Class(TObject)
  public
    PenColor: tcolor;
    FontColor: tcolor;
    FontSize: integer;
    FontName: tfontname;
    Rect: TRect;
    procedure DrawScaler(cv: tcanvas);
    Procedure WriteToStream(F: tStream);
    Procedure ReadFromStream(F: tStream);
    procedure UpdateData;
    Constructor Create;
    Destructor Destroy; override;
  end;

  TTLTimeline = Class(TObject)
  public
    IDTimeline: longint;
    TypeTL: TTypeTimeline;
    Block: boolean;
    Status: integer;
    Rect: TRect;
    Count: integer;
    Events: Array of TMyEvent;

    function AddEvent(Position: longint; psgrd, psclr: integer): integer;
    function FindEventID(IdEvent: longint): integer;
    function FindEvent(Position: longint): integer;
    function FindEventPos(evframe: longint): integer;
    procedure Delete(Position: longint);
    procedure DeleteID(IdEvent: longint);
    procedure Clear;
    procedure Assign(ListEvents: TTLTimeline);
    Procedure DrawDeviceTimeline(cv: tcanvas; EPos: integer);
    Procedure DrawTextTimeline(cv: tcanvas; EPos: integer);
    Procedure DrawMediaTimeline(cv: tcanvas; Color: tcolor; EPos: integer);
    procedure DrawTimeline(cv: tcanvas; NomTl: integer; EPos: integer);
    Procedure WriteToStream(F: tStream);
    Procedure ReadFromStream(F: tStream);
    // procedure UpdateData;
    Constructor Create;
    Destructor Destroy; override;
  end;

  TTLEditor = Class(TObject)
  public
    Index: integer;
    isZoneEditor: boolean;
    DoubleClick: boolean;
    IDTimeline: longint;
    Block: boolean;
    Status: integer;
    TypeTL: TTypeTimeline;
    Rect: TRect;
    Count: integer;
    Events: Array of TMyEvent;
    function AddEvent(Position: longint; psgrd, psclr: integer): integer;
*****

